buildscript {
    ext {
        springBootVersion = '2.1.3.RELEASE'
    }
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo1.maven.org/maven2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '2.8'
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.83")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'io.franzbecker.gradle-lombok' version '3.2.0'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id "info.solidsoft.pitest" version "1.4.6"
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '5.3.0'
    id 'org.sonarqube' version '2.8'
    id 'org.springframework.boot' version '2.1.3.RELEASE'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'org.sonarqube'
apply plugin: 'org.springframework.boot'
apply plugin: 'net.serenity-bdd.aggregator'

group = 'uk.gov.hmcts.reform.finrem'
version = '0.0.1'
mainClassName = 'uk.gov.hmcts.reform.finrem.payments.PaymentsApplication'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    jcenter()
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url 'https://repo.spring.io/libs-milestone' }
}

sourceSets {
    testSmoke {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }

    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }

    functional {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDirs = ['src/functionalTests/java']
        }
        resources {
            srcDirs = ['src/functionalTests/resources']
        }
    }

    contract {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }
}

def versions = [
        commonsBeanUtils        : '1.9.4',
        commonsLang3            : '3.9',
        commonsIo               : '2.6',
        jackson                 : '2.10.0',
        javaxWsRs               : '2.1.1',
        jsonAssert              : '1.5.0',
        junit                   : '4.13',
        lombok                  : '1.18.10',
        mockito                 : '2.8.9',
        pact_version            : '3.6.14',
        pitest                  : '1.4.11',
        puppyCrawl              : '7.6',
        reformHealth            : '0.0.5',
        reformLogging           : '5.1.1',
        reformPropertiesVolume  : '0.0.4',
        restAssured             : '4.1.2',
        serenity                : '2.0.91',
        serenityCucumber        : '1.9.50',
        serviceTokenGenerator   : '1.0.4',
        springfoxSwagger        : '2.9.2',
        springRetry             : '1.2.1.RELEASE',
        springBoot              : '2.1.3.RELEASE',
        tomcat                  : '9.0.30',
        wiremockVersion         : '2.25.1'
]

configurations {
    functionalCompile.extendsFrom testCompile
    functionalRuntime.extendsFrom testRuntime
}

dependencyManagement {
    dependencies {
        dependencySet(
                group: 'com.fasterxml.jackson.core',
                version: versions.jackson
        ) {
            entry 'jackson-core'
            entry 'jackson-databind'
        }
        dependencySet(
                group: 'com.fasterxml.jackson.datatype',
                version: versions.jackson
        ) {
            entry 'jackson-datatype-jdk8'
            entry 'jackson-datatype-jsr310'
        }
        dependencySet(
                group: 'com.fasterxml.jackson.module',
                version: versions.jackson
        ) {
            entry 'jackson-module-parameter-names'
        }
        dependency group: 'commons-beanutils', name: 'commons-beanutils', version: versions.commonsBeanUtils
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-configuration-processor")
    compile group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: versions.javaxWsRs
    compile group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
    compile group: 'org.springframework.retry', name: 'spring-retry', version: versions.springRetry
    compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: versions.reformHealth
    compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
    compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: versions.reformPropertiesVolume
    compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.serviceTokenGenerator

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile group: 'com.github.tomakehurst', name: 'wiremock', version: versions.wiremockVersion

    testSmokeCompile group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    testSmokeCompile sourceSets.main.runtimeClasspath
    testSmokeCompile sourceSets.test.runtimeClasspath

    functionalCompile group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    functionalCompile group: 'junit', name: 'junit', version: versions.junit
    functionalCompile group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    functionalCompile group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
    functionalCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    functionalCompile group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    functionalCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    functionalCompile group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    functionalCompile group: 'org.skyscreamer', name: 'jsonassert', version: versions.jsonAssert
    functionalCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    functionalCompile group: 'org.springframework.boot', name: 'spring-boot-starter-web'

    contractCompile group: 'au.com.dius', name: 'pact-jvm-consumer-java8_2.12', version: versions.pact_version
    contractCompile group: 'au.com.dius', name: 'pact-jvm-consumer-junit5_2.12', version: versions.pact_version
    contractCompile group: 'au.com.dius', name: 'pact-jvm-provider-spring_2.12', version: versions.pact_version
    contractCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'

    contractCompile sourceSets.main.runtimeClasspath

    compile (group: 'commons-beanutils', name: 'commons-beanutils', version: versions.commonsBeanUtils) {
        force = true
    }
    compile (group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson) {
        force = true
    }
    compile (group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: versions.tomcat) {
        force = true
    }
    compile (group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: versions.tomcat) {
        force = true
    }
    compile (group: 'org.apache.tomcat.embed', name: 'tomcat-embed-el', version: versions.tomcat) {
        force = true
    }
}

def sonarExclusions = [
        '**/uk/gov/hmcts/reform/finrem/payments/config/**',
        '**/uk/gov/hmcts/reform/finrem/payments/model/**',
        '**/uk/gov/hmcts/reform/finrem/payments/PaymentsApplication'
]

sonarqube {
    properties {
        property "sonar.exclusions", sonarExclusions.join(', ')
        property "sonar.projectKey", "finrem-payment-service"
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

checkstyle {
    maxWarnings = 0
    toolVersion = '7.8.2'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configFile = new File(rootDir, "checkstyle.xml")
}

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

jacocoTestReport {
    executionData(test)

    reports {
        xml {
            enabled true
        }

        html {
            enabled true
        }
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.finrem.payments.*']
    excludedClasses = [
            'uk.gov.hmcts.reform.finrem.payments.PaymentsApplication',
            'uk.gov.hmcts.reform.finrem.payments.model.*',
            'uk.gov.hmcts.reform.finrem.payments.config.*',
            'uk.gov.hmcts.reform.finrem.payments.controllers.PaymentByAccountStub']
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 80
}

compileJava.dependsOn(processResources)
build.dependsOn jacocoTestReport

bootJar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
    archiveName 'finrem-payment-service.jar'
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    testClassesDirs = sourceSets.testSmoke.output.classesDirs
    classpath = sourceSets.testSmoke.runtimeClasspath
    finalizedBy aggregate
}

task functional(type: Test) {
    description = "Runs functional Tests"
    setTestClassesDirs(sourceSets.functional.output.classesDirs)
    setClasspath(sourceSets.functional.runtimeClasspath)
    finalizedBy aggregate
}

task contract(type: Test) {
    useJUnitPlatform()
    description = "Runs Contract Tests"
    setTestClassesDirs(sourceSets.contract.output.classesDirs)
    setClasspath(sourceSets.contract.runtimeClasspath)
    finalizedBy aggregate
}